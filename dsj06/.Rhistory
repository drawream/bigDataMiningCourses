setwd("./")
setwd("./")
finance_data <- read.csv("D:\\chapter4\\data\\finance.csv",header=T)#读取数据
finance_data <- read.csv("D:\\chapter4\\data\\finance.csv",header=T)#读取数据
finance_data <- read.csv("./finance.csv",header=T)#读取数据
finance_data <- read.csv("./finance.csv",header=T)#读取数据
setwd("C://Users//Jayce//Documents//RStudioWorkspace//prj06")
# 获取源数据，并根据数据描述，对每一列重命名
wdbc<-read.csv("./wdbc.data",header = F)#原数据的列名为v1,v2,不好理解，因此
#根据数据描述，对每一列重命名
wdbc.name<-c("Radius","Texture","Perimeter","Area","Smoothness","Compactness","Concavity","Conca
ve points","Symmetry","Fractal dimension")
wdbc.name<-c(wdbc.name,paste(wdbc.name,"_mean",sep=""),paste(wdbc.name,"_worst",sep=""))
names(wdbc)<-c("id","diagnosis",wdbc.name)
str(wdbc)
# 用table 查看比例：
table(diagnosis)
# 用table 查看比例：
table(wdbc)
# 用table 查看比例：
table(diagnosis)
# 获取源数据，并根据数据描述，对每一列重命名
wdbc<-read.csv("./wdbc.data",header = F)#原数据的列名为v1,v2,不好理解，因此
#根据数据描述，对每一列重命名
wdbc.name<-c("Radius","Texture","Perimeter","Area","Smoothness","Compactness","Concavity","Conca
ve points","Symmetry","Fractal dimension")
wdbc.name<-c(wdbc.name,paste(wdbc.name,"_mean",sep=""),paste(wdbc.name,"_worst",sep=""))
names(wdbc)<-c("id","diagnosis",wdbc.name)
str(wdbc)
# 用table 查看比例：
table(wdbc)
# 用table 查看比例：
table(diagnosis)
wdbc<-wdbc[-1]
# 将目标属性编码因子化B 良性M 恶性：
diagnosis<-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
wdbc<-wdbc[-1]
source('~/RStudioWorkspace/prj06/prj06.R', encoding = 'UTF-8', echo=TRUE)
# 用table 查看比例：
table(diagnosis)
s
# 启动Rstudio，新建R script 文件，加载试验所需安装包。
install.packages("kknn")
setwd("C://Users//Jayce//Documents//RStudioWorkspace//prj06")
# 获取源数据，并根据数据描述，对每一列重命名
wdbc<-read.csv("./wdbc.data",header = F)#原数据的列名为v1,v2,不好理解，因此
#根据数据描述，对每一列重命名
wdbc.name<-c("Radius","Texture","Perimeter","Area","Smoothness","Compactness","Concavity","Conca
ve points","Symmetry","Fractal dimension")
wdbc.name<-c(wdbc.name,paste(wdbc.name,"_mean",sep=""),paste(wdbc.name,"_worst",sep=""))
names(wdbc)<-c("id","diagnosis",wdbc.name)
str(wdbc)
(diagnosis)
# 用table 查看比例：
table(diagnosis)
names(wdbc)<-c("id","diagnosis",wdbc.name)
names(wdbc)<-c("id","diagnosis",wdbc.name)
names(wdbc)<-c("id","diagnosis",wdbc.name)
# 用table 查看比例：
table(diagnosis)
# 用table 查看比例：
install.packages("table")
# 用table 查看比例：
table(diagnosis)
wdbc<-wdbc[-1]
# 用table 查看比例：
table(diagnosis)
[-1]
[-1]
[-1]
[-1]
[-1]
[-1]
[-1]
[-1]
wdbc<-wdbc[-1]
wdbc<-wdbc[-1]
wdbc<-wdbc[-1]
wdbc<-wdbc[-1]
wdbc<-wdbc[-1]
setwd("C://Users//Jayce//Documents//RStudioWorkspace//prj06")
# 获取源数据，并根据数据描述，对每一列重命名
wdbc<-read.csv("./wdbc.data",header = F)#原数据的列名为v1,v2,不好理解，因此
#根据数据描述，对每一列重命名
wdbc.name<-c("Radius","Texture","Perimeter","Area","Smoothness","Compactness","Concavity","Conca
ve points","Symmetry","Fractal dimension")
wdbc.name<-c(wdbc.name,paste(wdbc.name,"_mean",sep=""),paste(wdbc.name,"_worst",sep=""))
names(wdbc)<-c("id","diagnosis",wdbc.name)
str(wdbc)
# 用table 查看比例：
table(diagnosis)
View(wdbc)
# 用table 查看比例：
table("diagnosis")
# 用table 查看比例：
table(diagnosis)
# 用table 查看比例：
table(wdbc.diagnosis)
# 用table 查看比例：
table(diagnosis)
# 获取源数据，并根据数据描述，对每一列重命名
wdbc<-read.csv("./wdbc.data",header = F)#原数据的列名为v1,v2,不好理解，因此
#根据数据描述，对每一列重命名
wdbc.name<-c("Radius","Texture","Perimeter","Area","Smoothness","Compactness","Concavity","Conca
ve points","Symmetry","Fractal dimension")
wdbc.name<-c(wdbc.name,paste(wdbc.name,"_mean",sep=""),paste(wdbc.name,"_worst",sep=""))
names(wdbc)<-c("id","diagnosis",wdbc.name)
str(wdbc)
# 用table 查看比例：
table(diagnosis)
# 用table 查看比例：
table(diagnosis)
# 用table 查看比例：
table($diagnosis)
# 用table 查看比例：
table(diagnosis)
View(wdbc)
# 用table 查看比例：
table(diagnosis)
# 用table 查看比例：
table(wdbc$diagnosis)
# 可以得到有357 个为良性，有212 个为恶性因为id 列没有意义，去掉id 列。
wdbc<-wdbc[-1]
# 将目标属性编码因子化B 良性M 恶性：
diagnosis<-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
# 将目标属性编码因子化B 良性M 恶性：
wdbc$diagnosis<-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
# 将目标属性编码因子化B 良性M 恶性：
wdbc$diagnosis<-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wdbc)
# 将目标属性编码因子化B 良性M 恶性：
wdbc$diagnosis<-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
View(wdbc)
# 将目标属性编码因子化B 良性M 恶性：
(wdbc$diagnosis) <-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
diagnosis = c(wdbc$diagnosis)
# 将目标属性编码因子化B 良性M 恶性：
diagnosis <-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
diagnosis
View(wdbc)
diagnosis <-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
diagnosis
setwd("C://Users//Jayce//Documents//RStudioWorkspace//prj06")
# 获取源数据，并根据数据描述，对每一列重命名
wdbc<-read.csv("./wdbc.data",header = F)#原数据的列名为v1,v2,不好理解，因此
#根据数据描述，对每一列重命名
wdbc.name<-c("Radius","Texture","Perimeter","Area","Smoothness","Compactness","Concavity","Conca
ve points","Symmetry","Fractal dimension")
wdbc.name<-c(wdbc.name,paste(wdbc.name,"_mean",sep=""),paste(wdbc.name,"_worst",sep=""))
names(wdbc)<-c("id","diagnosis",wdbc.name)
str(wdbc)
# 用table 查看比例：
table(wdbc$diagnosis)
View(wdbc)
# 可以得到有357 个为良性，有212 个为恶性因为id 列没有意义，去掉id 列。
wdbc<-wdbc[-1]
View(wdbc)
# 将目标属性编码因子化B 良性M 恶性：
diagnosis <-factor(diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
# 将目标属性编码因子化B 良性M 恶性：
diagnosis <-factor(wdbc$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
diagnosis
# 计算各自占比round 四舍五入round(x,digits=n) prop.table 得到边缘概率
round(prop.table(table(diagnosis))*100,digits=1)
# 通过summary 详细地观察3 个特征：可以看出不同特征的度量值差别大。
summary(wdbc[c("Radius_mean","Area_mean","Smoothness_mean")])
# 对数据通过归一化来进行无量纲处理，对数据进行转换
normalize<-function(x){ return((x-min(x))/(max(x)-min(x))) }
wdbc_n<-as.data.frame(lapply(wdbc[2:31],normalize))
# 查看其中一个变量的汇总统计量
summary(Area_mean)
# 查看其中一个变量的汇总统计量
summary(wdbc_n$Area_mean)
# 查看其中一个变量的汇总统计量
summary(wdbc$Area_mean)
# 切分数据集 由于没有新病人的数据，所以使用前469 条记录作为训练数据集，剩下的
# 100 条记录用来模拟新的病人
wdbc_train<-wdbc_n[1:469,]
wdbc_test<-wdbc_n[470:569,]
#存储目标变量标签
wdbc_train_labels<-wdbc[1:469,1]
wdbc_test_labels<-wdbc[470:569,1]
mal_rate<-table(wdbc_train_labels)
round(mal_rate[2]/sum(mal_rate),digits=2)
set.seed(1234)
ratio<-sample(1:dim(wdbc_n)[1],469,replace=F)
wdbc_train<-wdbc_n[ratio,]
wdbc_test<-wdbc_n[-ratio,]
wdbc_train_labels<-wdbc[ratio,1]
wdbc_test_labels<-wdbc[-ratio,1]
mal_rate<-table(wdbc_train_labels)
round(mal_rate[2]/sum(mal_rate),digits=2)
# 第三种方法：直接利用"caret"包中的crateDataPartition 函数可自动分区。
library(lattice)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(caret)
install.packages("caret")
library(caret)
set.seed(1234)
ratio<-createDataPartition(y=diagnosis,p=0.8,list=FALSE)
wdbc_train<-wdbc_n[ratio,]
wdbc_test<-wdbc_n[-ratio,]
wdbc_train_labels<-wdbc[ratio,1]
wdbc_test_labels<-wdbc[-ratio,1]
mal_rate<-table(wdbc_train_labels)
round(mal_rate[2]/sum(mal_rate),digits=2)
# 使用knn()函数对测试数据进行分类
library(class)
wdbc_test_pred<-knn(train=wdbc_train,test=wdbc_test,cl=wdbc_train_labels,k=21)
# 创建一个用来标识两个向量之间一致性的交叉表
library(gmodels)
# 创建一个用来标识两个向量之间一致性的交叉表
install.packages("gmodels")
library(gmodels)
CrossTable(x=wdbc_test_labels,y=wdbc_test_pred,prop.chisq=FALSE)
# 选取两个变量作为横纵坐标进行画图，观察实际类别与预测的分类结果。
plot(wdbc_test$Texture_mean,wdbc_test$Radius_mean,col=wdbc_test_pred,
pch=as.integer(wdbc_test_labels))
