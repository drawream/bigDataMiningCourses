setwd("./")
setwd("./")
finance_data <- read.csv("D:\\chapter4\\data\\finance.csv",header=T)#读取数据
finance_data <- read.csv("D:\\chapter4\\data\\finance.csv",header=T)#读取数据
finance_data <- read.csv("./finance.csv",header=T)#读取数据
finance_data <- read.csv("./finance.csv",header=T)#读取数据
x1=(2,4,6,8,0), x2=(1,3,5,7,9)
x1=c(2,4,6,8,0) x2=c(1,3,5,7,9)
x1=c(2,4,6,8,0) x2=c(1,3,5,7,9)
x1=c(2,4,6,8,0)
x2=c(1,3,5,7,9)
length(x1)
x2[3]
rbind(x1,x2)
matrix(c(1:6), nrow=2, ncol=3, byrow=T)
c(1, c(2, c(3, 4)))
# 设置路径
setwd("C:\\Users\\Jayce\\Documents\\RStudioWorkspace\\dsj10")
getwd()
# 安装lars包
# install.packages("lars")
library(lars)
# 导入数据
data<-read.csv("./b03335d7b0717fd5370cdc41.csv")
View(data)
getwd()
# 安装lars包
# install.packages("lars")
library(lars)
# 导入数据
data<-read.csv("./000.csv")
View(data)
# 构建模型
head(data)
x2 <- data$x
gm11<-function(x0,t){ #x0 为输入学列，t 为预测个数
x1<-cumsum(x0) #一次累加生成序列1-AG0 序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){ #生成x1 的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b
} #得序列b，即为x1 的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)#做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2:length(x0)]
alpha<-M%*%BT%*%YN #模型的最小二乘估计参数列满足alpha 尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
#利用最小二乘法求得参数  估计值a,u
cat("GM(1,1)#参数估计值：",
'\n',
"发展系数-a=",
-a,
" ",
"灰色作用量u=",u,'\n','\n')
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
#将a,u 的估计值代入时间响应序列函数计算x1 拟合序列y
for(w in 1:(t-1)){
(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){ #运用后减运算还原得模型输入序列x0 预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l] #得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s]) #得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
#后验差比值检验
#计算残差的方差se
avge<-mean(abs(e));
esum<-sum((abs(e)-avge)^2);
evar=esum/(length(e)-1);
se=sqrt(evar)
#计算原序列x0 的方差
avgx0<-mean(x0);
x0sum<-sum((x0-avgx0)^2);
x0var=x0sum/(length(x0));
sx=sqrt(x0var)
sx
cv<-se/sx #得验差比值
#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
cat("后验差比值检验:",'\n',"C 值=",cv,'\n')
if(cv < 0.35){
cat("C 值<0.35, GM(1,1)预测精度等级为：好",'\n','\n')
}else{
if(cv<0.5){
cat("C 值属于[0.35,0.5), GM(1,1)模型预测精度等级为：合格",'\n','\n')
}else{
if(cv<0.65){
cat("C 值属于[0.5,0.65), GM(1,1)模型预测精度等级为：勉强合格",'\n','\n')
}else{
cat("C 值>=0.65, GM(1,1)模型预测精度等级为：不合格",'\n','\n')
}
}
}
#画出输入序列x0 的预测序列及x0 的比较图像
plot(xy,col='blue',type='b',pch=16,xlab='时间序列',ylab='值')
points(x0,col='red',type='b',pch=4)
legend('topleft',c('预测值','原始值'),pch=c(16,4),lty=l,col=c('blue','red'))
}
plot(xy,col='blue',type='b',pch=16,xlab='时间序列',ylab='值')
points(x0,col='red',type='b',pch=4)
legend('topleft',c('预测值','原始值'),pch=c(16,4),lty=l,col=c('blue','red'))
gm11(x2,length(x2)+2)
# 设置路径
setwd("C:\\Users\\Jayce\\Documents\\RStudioWorkspace\\dsj10")
getwd()
# 安装lars包
# install.packages("lars")
library(lars)
# 导入数据
data<-read.csv("./000.csv")
View(data)
# 构建模型
head(data)
x2 <- data$x
gm11<-function(x0,t){ #x0 为输入学列，t 为预测个数
x1<-cumsum(x0) #一次累加生成序列1-AG0 序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){ #生成x1 的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b
} #得序列b，即为x1 的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)#做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2:length(x0)]
alpha<-M%*%BT%*%YN #模型的最小二乘估计参数列满足alpha 尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
#利用最小二乘法求得参数  估计值a,u
cat("GM(1,1)#参数估计值：",
'\n',
"发展系数-a=",
-a,
" ",
"灰色作用量u=",u,'\n','\n')
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
#将a,u 的估计值代入时间响应序列函数计算x1 拟合序列y
for(w in 1:(t-1)){
(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){ #运用后减运算还原得模型输入序列x0 预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l] #得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s]) #得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
#后验差比值检验
#计算残差的方差se
avge<-mean(abs(e));
esum<-sum((abs(e)-avge)^2);
evar=esum/(length(e)-1);
se=sqrt(evar)
#计算原序列x0 的方差
avgx0<-mean(x0);
x0sum<-sum((x0-avgx0)^2);
x0var=x0sum/(length(x0));
sx=sqrt(x0var)
sx
cv<-se/sx #得验差比值
#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
cat("后验差比值检验:",'\n',"C 值=",cv,'\n')
if(cv < 0.35){
cat("C 值<0.35, GM(1,1)预测精度等级为：好",'\n','\n')
}else{
if(cv<0.5){
cat("C 值属于[0.35,0.5), GM(1,1)模型预测精度等级为：合格",'\n','\n')
}else{
if(cv<0.65){
cat("C 值属于[0.5,0.65), GM(1,1)模型预测精度等级为：勉强合格",'\n','\n')
}else{
cat("C 值>=0.65, GM(1,1)模型预测精度等级为：不合格",'\n','\n')
}
}
}
#画出输入序列x0 的预测序列及x0 的比较图像
plot(xy,col='blue',type='b',pch=16,xlab='时间序列',ylab='值')
points(x0,col='red',type='b',pch=4)
legend('topleft',c('预测值','原始值'),pch=c(16,4),lty=l,col=c('blue','red'))
}
gm11(x2,length(x2)+2)
gm11(x2,length(x2)+2)
View(gm11)
View(data)
x2
x2
# 导入数据
data<-read.csv("./000.csv")
# 构建模型
head(data)
x2 <- data$x
x2
# 设置路径
setwd("C:\\Users\\Jayce\\Documents\\RStudioWorkspace\\dsj10")
getwd()
# 安装lars包
# install.packages("lars")
library(lars)
# 导入数据
data<-read.csv("./000.csv")
# 构建模型
head(data)
x2 <- data$x
x2
x2<-data$x
gm11<-function(x0,t){#x0为输入学列,t为预测个数
x1<-cumsum(x0)#一次累加生成序列 1-AG0 序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){#生成x1的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b}#得序列 b，即为x1的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)#做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2 : length(x0)]
alpha<-M%*%BT%*%YN #模型的最小二乘估计参数列满足 alpha 尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
cat("GM(1,1)#参数估计值：",'\n',"发展系数-a=",-a," ","灰色作用量 u=",u,'\n','\n')#利用最小二乘法求得参数估计值a,u
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
for(w in 1:(t-1)){ #将 a,u 的估计值代入时间响应序列函数计算 x1 拟合序列y
y[w+1]<-(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){#运用后减运算还原得模型输入序列 x0 预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差 e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l]#得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s])#得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
avge<-mean(abs(e));esum<-sum((abs(e)-avge)^2);evar=esum/(length(e)-1);se=sqrt(evar) #计算残差的方差 se
avgx0<-mean(x0);x0sum<-sum((x0-avgx0)^2);x0var=x0sum/(length(x0));sx=sqrt(x0var) #计算原序列 x0 的方差 sx
cv<-se/sx #得验差比值
cat("后验差比值检验:",'\n',"C 值=",cv,'\n')#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
if(cv<0.35){ cat("C 值<0.35,GM(1,1)预测精度等级为：好",'\n','\n') }
else{
if(cv<0.5){ cat("C 值属于[0.35,0.5),GM(1,1)模型预测精度等级为：合格",'\n','\n') }
else{
if(cv<0.65)
{ cat("C 值属于[0.5,0.65),GM(1,1)模型预测精度等级为：勉强合格",'\n','\n') }
else
{ cat("C 值>=0.65,GM(1,1)模型预测精度等级为：不合格",'\n','\n') }
}
} #画出输入序列 x0 的预测序列及 x0 的比较图像
plot(xy,col='blue',type='b',pch=16,xlab='时间序列',ylab='值')
points(x0,col='red',type='b',pch=4)
legend('topleft',c('预测值','原始值'),pch=c(16,4),lty=l,col=c('blue','red'))
}
gm11(x2,length(x2)+2)
set.seed(3147) #设置随机种子
x <- rnorm(100) #随机生成100 个数值的向量
options(digits = 5)
summary(x)
boxplot.stats(x)$out #查询数据中离群点的值
boxplot(x) #绘制箱线图
y <- rnorm(100) #随机生成100 个数值的向量
df <- data.frame(x, y) #生成数据框
rm(x, y) #删除向量x,y
head(df) #查看数据框前五行
head(df) #查看数据框前五行
attach(df) #为了避免重复地键入对象名称
(a <- which(x %in% boxplot.stats(x)$out)) #判断x 是否有值在离群点的值并返回位置
(b <- which(y %in% boxplot.stats(y)$out)) #判断y 是否有值在离群点的值并返回位置
detach(df)
(outliers.list1 <- intersect(a,b)) #取a,b 的交集
plot(df)
points(df[outliers.list1,], col = 'red', pch = '+', cex = 2.5)
(outliers.list2 <- union(a,b))
plot(df)
points(df[outliers.list2,], col = 'blue', pch = '+', cex = 2)
# 设置路径
setwd("C:\\Users\\Jayce\\Documents\\RStudioWorkspace\\dsj10")
getwd()
# 安装lars包
# install.packages("lars")
library(lars)
# 导入数据
data<-read.csv("./000.csv")
# 构建模型
head(data)
x2 <-data$x
# 导入数据
data<-read.csv("./000.csv")
View(data)
# 构建模型
head(data)
x2 <-data$x
gm11<-function(x0,t){ #x0为输入学列,t为预测个数
x1<-cumsum(x0)  #一次累加生成序列 1-AG0 序列
b<-numeric(length(x0)-1)
n<-length(x0)-1
for(i in 1:n){  #生成x1的紧邻均值生成序列
b[i]<--(x1[i]+x1[i+1])/2
b}  #得序列 b，即为x1的紧邻均值生成序列
D<-numeric(length(x0)-1)
D[]<-1
B<-cbind(b,D)
BT<-t(B)  #做逆矩阵
M<-solve(BT%*%B)
YN<-numeric(length(x0)-1)
YN<-x0[2 : length(x0)]
alpha<-M%*%BT%*%YN   #模型的最小二乘估计参数列满足 alpha 尖
alpha2<-matrix(alpha,ncol=1)
a<-alpha2[1]
u<-alpha2[2]
cat("GM(1,1)  #参数估计值：",'\n',"发展系数-a=",-a," ","灰色作用量 u=",u,'\n','\n')#利用最小二乘法求得参数估计值a,u
y<-numeric(length(c(1:t)))
y[1]<-x1[1]
for(w in 1:(t-1)){  #将 a,u 的估计值代入时间响应序列函数计算 x1 拟合序列y
y[w+1]<-(x1[1]-u/a)*exp(-a*w)+u/a
}
##cat("x(1)的模拟值：",'\n',y,'\n')
xy<-numeric(length(y))
xy[1]<-y[1]
for(o in 2:t){  #运用后减运算还原得模型输入序列 x0 预测序列
xy[o]<-y[o]-y[o-1]
}
cat("x(0)的模拟值：",'\n',xy,'\n','\n')
#计算残差 e
e<-numeric(length(x0))
for(l in 1:length(x0)){
e[l]<-x0[l]-xy[l] #得残差
}
##cat("残差：",'\n',e,'\n')
#计算相对误差
e2<-numeric(length(x0))
for(s in 1:length(x0)){
e2[s]<-(abs(e[s])/x0[s])#得相对误差
}
##cat("相对残差：",'\n',e2,'\n','\n')
cat("残差平方和=",sum(e^2),'\n')
cat("平均相对误差=",sum(e2)/(length(e2)-1)*100,"%",'\n')
cat("相对精度=",(1-(sum(e2)/(length(e2)-1)))*100,"%",'\n','\n')
avge<-mean(abs(e));
esum<-sum((abs(e)-avge)^2);
evar=esum/(length(e)-1);
se=sqrt(evar) #计算残差的方差 se
avgx0<-mean(x0);
x0sum<-sum((x0-avgx0)^2);
x0var=x0sum/(length(x0));
sx=sqrt(x0var)
#计算原序列 x0 的方差 sx
cv<-se/sx #得验差比值
cat("后验差比值检验:",
'\n',
"C 值=",
cv,
'\n')
#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。
if(cv<0.35){ cat("C 值<0.35,GM(1,1)预测精度等级为：好",'\n','\n') }
else{
if(cv<0.5){
cat("C 值属于[0.35,0.5),GM(1,1)模型预测精度等级为：合格",'\n','\n') }
else{
if(cv<0.65){
cat("C 值属于[0.5,0.65),GM(1,1)模型预测精度等级为：勉强合格",'\n','\n')
}else{
cat("C 值>=0.65,GM(1,1)模型预测精度等级为：不合格",'\n','\n') }
}
} #画出输入序列 x0 的预测序列及 x0 的比较图像
plot(xy,col='blue',type='b',pch=16,xlab='时间序列',ylab='值')
points(x0,col='red',type='b',pch=4)
legend('topleft',c('预测值','原始值'),pch=c(16,4),lty=l,col=c('blue','red'))
}
gm11(x2,length(x2)+2)
set.seed(3147) #设置随机种子
x <- rnorm(100) #随机生成100 个数值的向量
options(digits = 5) #保存小数点后四位
summary(x) #查询向量x 的四分位数
boxplot.stats(x)$out #查询数据中离群点的值
boxplot(x) #绘制箱线图
y <- rnorm(100) #随机生成100 个数值的向量
df <- data.frame(x, y) #生成数据框
rm(x, y) #删除向量x,y
head(df) #查看数据框前五行
attach(df) #为了避免重复地键入对象名称
(a <- which(x %in% boxplot.stats(x)$out)) #判断x 是否有值在离群点的值并返回位置
(b <- which(y %in% boxplot.stats(y)$out)) #判断y 是否有值在离群点的值并返回位置
detach(df)
(outliers.list1 <- intersect(a,b)) #取a,b 的交集
plot(df)
plot(df)
points(df[outliers.list1,], col = 'red', pch = '+', cex = 2.5)
(outliers.list2 <- union(a,b))
